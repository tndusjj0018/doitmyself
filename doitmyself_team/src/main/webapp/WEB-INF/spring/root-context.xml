<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<bean class="org.apache.commons.dbcp.BasicDataSource"
		  id="dataSource"
		  destroy-method="close">
		  
		<property name="driverClassName"
				  value="oracle.jdbc.driver.OracleDriver" />
		<property name="url"
				  value="jdbc:oracle:thin:@localhost:1521:xe" />
		<property name="username" value="DIM" />
		<property name="password" value="DIM" />
	</bean>	
	
	<bean class="org.mybatis.spring.SqlSessionFactoryBean"
		  id="sqlSessionFactory">
		  
		<property ref="dataSource" name="dataSource" />
		<property name="configLocation"
				  value="classpath:util/SqlMapConfig.xml" />
	</bean>
	
	<!-- SqlSessionTemplate은 마이바티스 스프링 연동모듈의 핵심이다.
		 SqlSessionTemplate은 SqlSession을 구현하고 코드에서 SqlSession을 대체하는 역할을 한다.
		 SqlSessionTemplate은 스레드에 안전하고 여러 개의 DAO나
		 매퍼에서 공유할 수 있고 필요한 시점에 세션을 닫고 커밋하거나 롤백하는 것을 포함한
		 세션의 생명주기를 관리한다. -->
	<bean class="org.mybatis.spring.SqlSessionTemplate"
		  id="sqlSessionTemplate">		
		<constructor-arg ref="sqlSessionFactory" index="0" />	  
	</bean>
	
	<!-- 트랜잭션 처리 -->
	<bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		  id="transactionManager">
		<constructor-arg ref="dataSource" />
	</bean>
	
	<!-- 빈의 이름이 정해져 있습니다. -->
	<!-- 파일 업로드 설정 id값 꼭 일치 시켜야 합니다.
		 id값을 다르게 사용하면
		 public String bbs_write_ok(BbsBean bbsbean) throws Exception {
		 	MultipartFile uploadfile = bbsbean.getUploadfile();
		 }
		 => NullPointerException 발생 -->
	<bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
		  id="multipartResolver">
		<property name="maxUploadSize" value="10485760" />
	</bean>
	<!-- maxUploadSize : 한 번의 Request로 전달될 수 있는 최대의 크기를 의미합니다.
		 name="maxUploadSize"를 지정하지 않으면 기본으로 "-1"이 설정되는데,
		  파일 크기가 무제한이라는 의미입니다. -->
		  
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
	      <property name="host" value="smtp.gmail.com" />
	      <property name="port" value="465" />
	      <property name="defaultEncoding" value="utf-8"/>
	      <property name="username" value="dende1594@gmail.com" />
	      <property name="password" value="tk1455tk55" />
	    
	
	      <!-- email 요청시는 SMTP -->
	      <property name="javaMailProperties">
	         <props>
	            <prop key="mail.transport.protocol">smtp</prop>
	            <prop key="mail.smtp.ssl.enable">true</prop>
	            <prop key="mail.smtp.auth">true</prop>
	            <prop key="mail.smtp.starttls.enable">true</prop>
	            <prop key="mail.debug">true</prop>
	         </props>
	      </property>
	   </bean>
	<bean id="email" class="com.kh.dim2.domain.Mail">
	</bean>
	<bean id="emailSender" class="com.kh.dim2.task.SendMail">
	</bean>		  
</beans>
